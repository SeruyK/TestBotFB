let Request = require('request');
const MongoClient = require('mongodb').MongoClient;
let log = require('winston');
let {to} = require('await-to-js');

const url = 'mongodb://localhost:27017';
const dbName = 'chatdb';
const catalogUsers = 'myUusertest';


module.exports = {
    findUser: async function (message) {
        let client;

        [err, client] = await to(MongoClient.connect(url));
        if (err) log.error(err);
        const db = client.db(dbName);
        let collection = await db.collection(catalogUsers);
        [err, result] = await to(collection.find({}).toArray());
        if (err) log.error(err);
        for (let i = 0; i < result.length; i++)
            if (result[i].userId == message.user) {
                client.close();
                return true;
            }
        client.close();
        return false;

    },


    insertUser: async function (message) {

        let client;

        [err, client] = await to(MongoClient.connect(url));
        if (err) console.log(err);
        const db = client.db(dbName);
        let collection = await db.collection(catalogUsers);
        collection.insertOne({userId: message.user, numberPhone: message.text}, function (err, res) {
            if (err) throw err;
            log.info("++++++++++User inserted+++++++++");
        })
        client.close();
        return false;

    },


    updateHistory: async function (currency, dateNow, userId) {
        let client;
        [err, client] = await to(MongoClient.connect(url));
        if (err) console.log(">>>>>>>>" + err + "<<<<<<<<<");
        const db = client.db(dbName);
        const collection = await db.collection('userHistory');
        collection.insertOne({userId: userId, currency: currency, dataNow: dateNow}, function (err, res) {
            if (err) throw err;
            log.info("++++++++++Histori updated+++++++++");
            client.close();
        })

        return false;

    },

    getCurrency: async function () {
        const options = {
            url: 'http://data.fixer.io/api/latest',
            qs: {
                access_key: "225b4c9ad28f6cf29e28ad308ebef0d6"
            },
            method: 'GET',
        };
        return new Promise(function (resolve, reject) {
            Request.get(options, function (err, resp, body) {
                if (err) {
                    reject(err);
                } else {
                    resolve(body);
                }
            })
        })
    },
    isPhone: function (phoneNumber) {
        let reg = /^(\+{1})([0-9]+)$/;
        if (reg.test(phoneNumber))
            return true;
        else
            return false;
    },
    buttonRequsst: async function(messageData){
        const options = {
            url: 'https://graph.facebook.com/v2.6/me/messages',
            qs: {
                access_token: process.env.access_token
            },
            method: 'POST',
            json:messageData
        };
        return new Promise(function (resolve, reject) {
            Request.post(options, function (err, resp) {
                if (err) {
                    reject(err);
                } else {
                    resolve(resp);
                }
            })
        })

}


}